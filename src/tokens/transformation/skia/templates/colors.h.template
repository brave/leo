// Copyright (c) 2022 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

#pragma once

#include "brave/browser/ui/color/brave_color_id.h"
#include "chrome/browser/ui/color/chrome_color_id.h"
#include "third_party/skia/include/core/SkColor.h"

namespace leo::light {
<%= groupedTokens.light.allTokens.map(prop => {
  return `constexpr SkColor ${prop.name} = ${prop.value}`;
}).map(s => `${s};`).join('\n') %>
} // namespace leo::light

namespace leo::dark {
<%= groupedTokens.dark.allTokens.map(prop => {
  return `constexpr SkColor ${prop.name} = ${prop.value}`;
}).map(s => `${s};`).join('\n') %>
} // namespace leo::dark

namespace leo {

enum class Theme {
  kLight,
  kDark
};

enum class Color : ui::ColorId {
  kLeoColorsStart = kBraveColorsEnd,
<%= groupedTokens.light.allTokens.map(prop => `  ${prop.name}`).join(',\n') %>,
  kLeoColorsEnd
};

constexpr SkColor GetColor(Color color, Theme theme) {
  switch (color) {
<%= groupedTokens.light.allTokens.map(prop => `    case Color::${prop.name}:
      return theme == Theme::kLight
        ? leo::light::${prop.name}
        : leo::dark::${prop.name};`).join('\n') %>
    default:
      return SK_ColorRED;
  }
}

} // namespace leo
