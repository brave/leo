// Copyright (c) 2022 The Brave Authors. All rights reserved.
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this file,
// you can obtain one at http://mozilla.org/MPL/2.0/.

#pragma once

#if !defined(NALA_COLORS_START)
#error "NALA_COLORS_START must be defined to ensure our color ids don't overlap. For example #define NALA_COLORS_START ui::kChromeColorsEnd"
#endif

#include "third_party/skia/include/core/SkColor.h"
#include "ui/color/color_mixer.h"
#include "ui/color/color_provider.h"
#include "ui/color/color_provider_key.h"

namespace leo {

<%= groupedTokens.rest.allTokens.map(prop => {
  return `constexpr SkColor ${prop.name} = ${prop.value};`;
}).join('\n') %>

} // namespace leo

namespace leo::light {
<%= groupedTokens.light.allTokens.map(prop => {
  return `constexpr SkColor ${prop.name} = ${prop.value};`;
}).join('\n') %>
} // namespace leo::light

namespace leo::dark {
<%= groupedTokens.dark.allTokens.map(prop => {
  return `constexpr SkColor ${prop.name} = ${prop.value};`;
}).join('\n') %>
} // namespace leo::dark

namespace leo {

enum class Theme {
  kLight,
  kDark
};

enum Color : ui::ColorId {
  kNalaColorsStart = NALA_COLORS_START,

<%= groupedTokens.light.allTokens.map(p => `  ${p.name}`).join(',\n') %>,
<%= groupedTokens.rest.allTokens.map(p => `  ${p.name}`).join(',\n') %>,

  kNalaColorsEnd
};

constexpr SkColor GetColor(Color color, Theme theme) {
  switch (color) {
<%= groupedTokens.light.allTokens.map(prop => `    case Color::${prop.name}:
      return theme == Theme::kLight
        ? leo::light::${prop.name}
        : leo::dark::${prop.name};`).join('\n') %>
<%= groupedTokens.rest.allTokens.map(prop => `    case Color::${prop.name}:
      return ${prop.name};`).join('\n') %>
    default:
      return SK_ColorRED;
  }
}

void AddLeoColorMixer(ui::ColorProvider* provider,
                       const ui::ColorProviderKey& key) {
  ui::ColorMixer& mixer = provider->AddMixer();
  const bool is_dark = key.color_mode == ui::ColorProviderKey::ColorMode::kDark;

  // Dynamic primitives, controlled by the Chromium palette
<%= groupedTokens.rest.allTokens.filter(t => t.dynamicPrimitive).map(t => `  mixer[${t.name}] = {provider->GetColor(ui::${t.dynamicRef})};`).join('\n') %>

  // Static primitives (hard coded)
<%= groupedTokens.rest.allTokens.filter(t => !t.dynamicPrimitive).map(t => `  mixer[${t.name}] = {${t.value}};`).join('\n') %>

  if (is_dark) {
<%= groupedTokens.dark.allTokens.map(t => `    mixer[${t.name}] = {${(t.value.startsWith('SkColor') ? t.value : `provider->GetColor(${t.value})`)}};`).join('\n') %>
  } else {
<%= groupedTokens.light.allTokens.map(t => `    mixer[${t.name}] = {${(t.value.startsWith('SkColor') ? t.value : `provider->GetColor(${t.value})`)}};`).join('\n') %>
  }
}

} // namespace leo
